@page "/add-weather-forecast"
@inject HttpClient Http
@using System.Net.Http.Headers
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@attribute [Authorize(Policy = Policies.CanManageWeatherForecast)]

<h1>
    Add New Weather Forecast
</h1>

<EditForm OnSubmit="@HandleValidSubmit" Model="@_model">
    <div class="form-group row">
        <label for="weatherName" class="col-sm-3">Weather name: </label>
        <InputText id="weatherName" class="form-control col-sm-8" @bind-Value="@_model.WeatherName" placeholder="Enter Weather name"></InputText>
    </div>
    <div class="form-group row">
        <div class="col-sm-3"></div>
        <div class="col-sm-8">
            <button type="submit" class="btn btn-primary edit-btn">Add New</button>
        </div>
    </div>
</EditForm>

@code {
    public class AddWeatherForecastModel
    {
        public string WeatherName { get; set; }
    }

    private AddWeatherForecastModel _model = new AddWeatherForecastModel();

    private async Task HandleValidSubmit()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var token = authState.User.Claims.FirstOrDefault(x => x.Type == "access_token");
            if (token != null)
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                try
                {
                    await Http.PostJsonAsync<bool>("http://localhost:5001/WeatherForecast", _model);
                    navigationManager.NavigateTo("/fetchdata");
                }
                catch (Exception err)
                {
                    Console.WriteLine("Error: {0}", err);
                }
            }
        }
    }
}
