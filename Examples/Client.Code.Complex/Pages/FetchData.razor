@page "/fetchdata"
@inject HttpClient Http
@using System.Net.Http.Headers
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [Authorize]

<h1>
    Weather forecast
    <AuthorizeView Policy="@Policies.CanManageWeatherForecast">
        <a class="btn btn-primary" href="/add-weather-forecast">Add New</a>
    </AuthorizeView>
</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
	private WeatherForecast[] forecasts;

	protected override async Task OnInitializedAsync()
	{
		var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
		if (authState.User.Identity.IsAuthenticated)
		{
			var token = authState.User.Claims.FirstOrDefault(x => x.Type == "access_token");
			if (token != null)
			{
				Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
				forecasts = await Http.GetJsonAsync<WeatherForecast[]>("http://localhost:5001/WeatherForecast");
			}
		}
	}

	public class WeatherForecast
	{
		public DateTime Date { get; set; }

		public int TemperatureC { get; set; }

		public string Summary { get; set; }

		public int TemperatureF { get; set; }
	}
}
